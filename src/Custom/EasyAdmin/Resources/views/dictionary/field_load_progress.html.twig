{% trans_default_domain 'messages' %}

<div class="load-progress-widget" id="dictionary-{{ item.id }}"
        data-dictionary-id="{{ item.id }}"
        data-dictionary-loaded="{{ item.loaded }}"
        data-dictionary-word-count="{{ item.wordCount }}">
    <div class="progress">
        <div class="progress-bar progress-bar-striped" style="width: 0;">
        </div>
    </div>
    <div class="status">
        <span class="loaded">0</span> / <span class="total">0</span>
        <span class="icon wait fa fa-spinner"></span>
        <span class="icon done fa fa-check"></span>
        <span class="icon cancelled fa fa-warning"></span>
        <span class="result done">{{ 'dictionary_loading.done'|trans }}</span>
        <span class="result cancelled">{{ 'dictionary_loading.cancelled'|trans }}</span>
    </div>
    <button type="button" class="btn btn-default float-left cancel">{{ 'dictionary_loading.cancel'|trans}}</button>
    <div class="clear-fix"></div>
</div>

<style>
    .load-progress-widget{
        width: 100%;
        text-align: center;
    }
    .load-progress-widget .progress{
        border: 1px solid #aaa;
        display: inline-block;
        width: 15em;
        vertical-align: middle;
        margin: 0 !important;

    }
    .load-progress-widget .status{
        width: 15em;
        display: inline-block;
        vertical-align: middle;
    }
    .load-progress-widget .icon.wait,
    .load-progress-widget .icon.done,
    .load-progress-widget .icon.cancelled{
        display: none;
    }
    .load-progress-widget.wait .icon.wait{
        display: inline-block;
        color: blue;
    }
    .load-progress-widget.done .icon.done{
        display: inline-block;
        color: green;
    }
    .load-progress-widget.cancelled .icon.cancelled{
        display: inline-block;
        color: red;
    }

    .load-progress-widget .result.done,
    .load-progress-widget .result.cancelled{
        display: none;
    }
    .load-progress-widget.done .result.done{
        display: inline-block;
    }
    .load-progress-widget.cancelled .result.cancelled{
        display: inline-block;
    }
    .load-progress-widget button.cancel{
        display: none;
    }
    .load-progress-widget.wait button.cancel{
        display: inline;
    }

</style>



<script>
    setTimeout(function wordTrainingEasyAdminLoadProgressFieldWidget() {
        var waitAnimation = {
            start: function (iconElem) {
                iconElem.data('animating', true);
                iconElem.data('startTime', performance.now());
                this.redraw(iconElem, performance.now());
            },
            redraw: function redraw(iconElem, time) {
                iconElem.css({'transform': 'rotate(' + ((time - iconElem.data('startTime')) >> 1) + 'deg)'});
                if (iconElem.data('animating'))
                    animationFrame = requestAnimationFrame(redraw.bind(null, iconElem));
            },
            stop: function (iconElem) {
                iconElem.data('animating', false);
            }
        };

        function initLoadProgressWidget(widget) {
            widget = $(widget);
            var loadedElem = widget.find('.loaded');
            var totalElem = widget.find('.total');
            var progressBarElem = widget.find('.progress-bar');
            var waitIconElem = widget.find('.icon.wait');

            if (widget.data('loaded')) {
                console.log(widget);
                loadedElem.text(widget.data('dictionaryWordCount'));
                totalElem.text(widget.data('dictionaryWordCount'));
                progressBarElem.css('width', '100%');
                widget.addClass('done');
                return;
            }

            var dictionaryId = widget.data('dictionary-id');
            waitAnimation.start(waitIconElem);
            widget.addClass('wait');
            //
            $.post('/dictionary_loading.php', {id: dictionaryId, start: 'start'});

            setTimeout(function updateProgress() {
                $.getJSON('/dictionary_loading.php', {id: dictionaryId, progress: 'progress'}, function (data) {
                    loadedElem.text(data.loaded);
                    totalElem.text(data.total);
                    progressBarElem.css('width', 100 * data.loaded / data.total + '%');

                    if (data.cancelled) {
                        widget.removeClass('wait').addClass('cancelled');
                        waitAnimation.stop(waitIconElem);
                        return;
                    }
                    if (data.done) {
                        widget.removeClass('wait').addClass('done');
                        waitAnimation.stop(waitIconElem);
                        return;
                    }
                    progressTimer = setTimeout(updateProgress, 1000);
                });
            }, 1000);

            $('button#cancel').click(function () {
                $.post('/dictionary_loading.php', {id: dictionaryId, cancel: 'cancel'});
            });
        }

        $(document).ready(function () {
            $('.load-progress-widget').each(function (index, widget) {
                initLoadProgressWidget(widget);
            });
        });
    },1000);


</script>
